[0;31m../build/jabukod ./jabukod/ackermann.jk -o ./jabukod/build/ackermann > /dev/null[0m
[0;31mgcc -O0 ./C/ackermann.c -o ./C/build/ackermann[0m
[0;31m../build/jabukod ./jabukod/binary_search.jk -o ./jabukod/build/binary_search > /dev/null[0m
[0;31mgcc -O0 ./C/binary_search.c -o ./C/build/binary_search[0m
[0;31m../build/jabukod ./jabukod/quick_sort.jk -o ./jabukod/build/quick_sort > /dev/null[0m
[0;31mgcc -O0 ./C/quick_sort.c -o ./C/build/quick_sort[0m
[0;31m/usr/bin/time -v ./jabukod/build/ackermann[0m
	Command being timed: "./jabukod/build/ackermann"
	User time (seconds): 13.58
	System time (seconds): 0.00
	Percent of CPU this job got: 99%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:13.58
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 3072
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 784
	Voluntary context switches: 1
	Involuntary context switches: 88
	Swaps: 0
	File system inputs: 0
	File system outputs: 0
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
[0;31m/usr/bin/time -v ./C/build/ackermann[0m
	Command being timed: "./C/build/ackermann"
	User time (seconds): 6.94
	System time (seconds): 0.00
	Percent of CPU this job got: 100%
	Elapsed (wall clock) time (h:mm:ss or m:ss): 0:06.94
	Average shared text size (kbytes): 0
	Average unshared data size (kbytes): 0
	Average stack size (kbytes): 0
	Average total size (kbytes): 0
	Maximum resident set size (kbytes): 3200
	Average resident set size (kbytes): 0
	Major (requiring I/O) page faults: 0
	Minor (reclaiming a frame) page faults: 579
	Voluntary context switches: 1
	Involuntary context switches: 60
	Swaps: 0
	File system inputs: 0
	File system outputs: 0
	Socket messages sent: 0
	Socket messages received: 0
	Signals delivered: 0
	Page size (bytes): 4096
	Exit status: 0
[0;31mperf stat -e cycles,instructions --repeat 100 ./jabukod/build/binary_search[0m

 Performance counter stats for './jabukod/build/binary_search' (100 runs):

           161â€¯929      cycles                                                                  ( +-  0,75% )
           126â€¯317      instructions                     #    0,78  insn per cycle              ( +-  0,37% )

        0,00028812 +- 0,00000286 seconds time elapsed  ( +-  0,99% )

[0;31mperf stat -e cycles,instructions --repeat 100 ./C/build/binary_search[0m

 Performance counter stats for './C/build/binary_search' (100 runs):

         1â€¯145â€¯265      cycles                                                                  ( +-  0,20% )
         1â€¯012â€¯900      instructions                     #    0,88  insn per cycle              ( +-  0,11% )

        0,00058402 +- 0,00000220 seconds time elapsed  ( +-  0,38% )

[0;31mperf stat -e cycles,instructions --repeat 100 ./jabukod/build/quick_sort[0m

 Performance counter stats for './jabukod/build/quick_sort' (100 runs):

           203â€¯033      cycles                                                                  ( +-  0,47% )
           167â€¯913      instructions                     #    0,83  insn per cycle              ( +-  0,25% )

        0,00030909 +- 0,00000210 seconds time elapsed  ( +-  0,68% )

[0;31mperf stat -e cycles,instructions --repeat 100 ./C/build/quick_sort[0m

 Performance counter stats for './C/build/quick_sort' (100 runs):

         1â€¯199â€¯492      cycles                                                                  ( +-  0,52% )
         1â€¯029â€¯419      instructions                     #    0,86  insn per cycle              ( +-  0,09% )

         0,0006412 +- 0,0000386 seconds time elapsed  ( +-  6,02% )

[0;31mls -l ./jabukod/build[0m
celkem 56
-rwxrwxr-x 1 martin martin  5984 kvÄ›  9 14:51 ackermann
-rw-rw-r-- 1 martin martin  2040 kvÄ›  9 14:51 ackermann.o
-rw-rw-r-- 1 martin martin  2991 kvÄ›  9 14:51 ackermann.s
-rwxrwxr-x 1 martin martin 10288 kvÄ›  9 14:51 binary_search
-rw-rw-r-- 1 martin martin  2752 kvÄ›  9 14:51 binary_search.o
-rw-rw-r-- 1 martin martin  2818 kvÄ›  9 14:51 binary_search.s
-rwxrwxr-x 1 martin martin 10008 kvÄ›  9 14:51 quick_sort
-rw-rw-r-- 1 martin martin  2808 kvÄ›  9 14:51 quick_sort.o
-rw-rw-r-- 1 martin martin  3690 kvÄ›  9 14:51 quick_sort.s
[0;31mls -l ./C/build[0m
celkem 48
-rwxrwxr-x 1 martin martin 15816 kvÄ›  9 14:51 ackermann
-rwxrwxr-x 1 martin martin 16360 kvÄ›  9 14:51 binary_search
-rwxrwxr-x 1 martin martin 16296 kvÄ›  9 14:51 quick_sort
[0;31mvalgrind --tool=massif --stacks=yes --massif-out-file=./jabukod/build/ackermann.massif.out ./jabukod/build/ackermann[0m
==4864== Massif, a heap profiler
==4864== Copyright (C) 2003-2017, and GNU GPL'd, by Nicholas Nethercote
==4864== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==4864== Command: ./jabukod/build/ackermann
==4864== 
==4864== 
[0;31mms_print ./jabukod/build/ackermann.massif.out[0m
--------------------------------------------------------------------------------
Command:            ./jabukod/build/ackermann
Massif arguments:   --stacks=yes --massif-out-file=./jabukod/build/ackermann.massif.out
ms_print arguments: ./jabukod/build/ackermann.massif.out
--------------------------------------------------------------------------------


    MB
2.980^                                                                      # 
     |                                                            @ @ @ @ @ # 
     |                                                    @ @@ @ @@ @ @ @ @ # 
     |                                            @   @   @ @@ @ @@ @ @ @ @:#:
     |                                        @   @   @   @ @@ @ @@:@ @:@ @:#:
     |                                 @    : @ ::@   @   @ @@ @ @@:@ @:@ @:#:
     |                            @    @    : @ : @:  @   @ @@ @ @@:@ @:@ @:#:
     |                            @    @   :::@ : @:  @   @ @@ @ @@:@ @:@ @:#:
     |                      @     @    @:: :::@ : @:  @   @ @@ @ @@:@ @:@ @:#:
     |                  @@  @     @    @:: :::@ : @:  @ ::@ @@ @ @@:@ @:@:@:#:
     |                  @ : @     @    @:: :::@ : @:  @ : @ @@ @ @@:@ @:@:@:#:
     |               @  @ : @:  ::@    @:: :::@:: @:  @ : @ @@ @ @@:@ @:@:@:#:
     |               @  @ ::@:  ::@   :@:: :::@:: @:  @ : @ @@:@ @@:@ @:@:@:#:
     |               @  @ ::@:::::@   :@:: :::@:: @:  @ : @:@@:@:@@:@ @:@:@:#:
     |        :   :::@  @ ::@:: ::@  ::@:: :::@:: @:  @:: @:@@:@:@@:@ @:@:@:#:
     |        : : : :@  @ ::@:: ::@::::@:: :::@:: @:: @:: @:@@:@:@@:@ @:@:@:#:
     |  :: :::::: : :@: @ ::@:: ::@: ::@::::::@:: @:::@:: @:@@:@:@@:@ @:@:@:#:
     | @::::::::: : :@: @ ::@:: ::@: ::@::::::@:: @:::@:: @:@@:@:@@:@ @:@:@:#:
     | @::::::::::: :@: @ ::@:: ::@: ::@::::::@:: @:::@:: @:@@:@:@@:@ @:@:@:#:
     | @::::::::::: :@::@ ::@:: ::@: ::@::::::@:: @:::@:: @:@@:@:@@:@:@:@:@:#:
   0 +----------------------------------------------------------------------->Gi
     0                                                                   115.8

Number of snapshots: 83
 Detailed snapshots: [1, 14, 18, 21, 26, 30, 37, 40, 44, 48, 50, 53, 56, 59, 62, 65, 68, 72, 76, 80 (peak)]

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  0              0                0                0             0            0
  1  2,549,547,013          519,760                0             0      519,760
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  2  4,301,632,380          635,536                0             0      635,536
  3  5,688,927,885          627,616                0             0      627,616
  4  7,656,661,682          575,536                0             0      575,536
  5  9,843,935,913          647,728                0             0      647,728
  6 11,413,224,362          720,064                0             0      720,064
  7 12,713,970,225          668,080                0             0      668,080
  8 14,184,811,185        1,044,928                0             0    1,044,928
  9 16,032,465,523          763,168                0             0      763,168
 10 18,641,796,377          851,536                0             0      851,536
 11 20,368,032,152          359,824                0             0      359,824
 12 21,969,978,513        1,071,616                0             0    1,071,616
 13 24,201,488,647          978,784                0             0      978,784
 14 25,978,090,432        1,480,768                0             0    1,480,768
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 15 27,202,672,329          838,144                0             0      838,144
 16 29,044,530,446          767,248                0             0      767,248
 17 30,477,267,149          260,688                0             0      260,688
 18 32,146,161,376        1,736,608                0             0    1,736,608
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 19 34,607,212,776        1,655,920                0             0    1,655,920
 20 36,473,101,131        1,318,528                0             0    1,318,528
 21 38,557,194,496        2,016,352                0             0    2,016,352
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 22 41,219,105,958        1,504,432                0             0    1,504,432
 23 42,877,950,692        1,180,624                0             0    1,180,624
 24 45,176,220,102        1,503,568                0             0    1,503,568
 25 47,181,620,287        1,413,376                0             0    1,413,376
 26 49,597,018,459        2,272,240                0             0    2,272,240
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 27 51,764,576,912          909,456                0             0      909,456
 28 54,362,784,972          974,128                0             0      974,128
 29 56,212,775,797        1,309,312                0             0    1,309,312
 30 57,721,798,291        2,412,112                0             0    2,412,112
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 31 60,084,094,636        2,030,320                0             0    2,030,320
 32 61,696,194,029        1,915,936                0             0    1,915,936
 33 63,369,728,792          707,248                0             0      707,248
 34 65,106,037,857        2,128,624                0             0    2,128,624
 35 66,906,473,204        2,477,200                0             0    2,477,200
 36 68,775,979,817        2,105,728                0             0    2,105,728
 37 69,902,235,067        2,586,256                0             0    2,586,256
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 38 71,522,847,937        1,491,136                0             0    1,491,136
 39 73,527,858,397        2,413,024                0             0    2,413,024
 40 76,136,167,291        2,664,688                0             0    2,664,688
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 41 77,756,780,158        2,286,640                0             0    2,286,640
 42 79,983,930,423          825,408                0             0      825,408
 43 81,471,168,492          753,088                0             0      753,088
 44 83,042,719,636        2,745,472                0             0    2,745,472
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 45 84,663,332,497          806,992                0             0      806,992
 46 86,312,568,865        1,003,840                0             0    1,003,840
 47 87,933,181,749        1,726,816                0             0    1,726,816
 48 90,674,043,232        2,828,704                0             0    2,828,704
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 49 92,294,656,097        1,165,408                0             0    1,165,408
 50 93,389,920,612        2,857,024                0             0    2,857,024
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 51 94,516,175,862        2,321,968                0             0    2,321,968
 52 95,642,431,113        1,143,808                0             0    1,143,808
 53 96,194,913,556        2,885,632                0             0    2,885,632
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 54 97,321,168,823        1,335,136                0             0    1,335,136
 55 98,447,424,092          783,424                0             0      783,424
 56 99,090,888,736        2,914,528                0             0    2,914,528
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 57 100,217,143,996        1,156,912                0             0    1,156,912
 58 101,343,399,255          439,584                0             0      439,584
 59 102,079,731,616        2,943,712                0             0    2,943,712
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 60 103,205,986,883        1,803,328                0             0    1,803,328
 61 104,332,242,134        1,895,824                0             0    1,895,824
 62 105,163,346,452        2,973,184                0             0    2,973,184
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 63 106,289,601,716        2,623,504                0             0    2,623,504
 64 107,415,856,985          190,528                0             0      190,528
 65 108,343,656,292        3,002,944                0             0    3,002,944
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 66 109,469,911,548          301,936                0             0      301,936
 67 110,596,166,807          296,160                0             0      296,160
 68 111,622,602,976        3,032,992                0             0    3,032,992
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 69 112,748,858,241        2,614,576                0             0    2,614,576
 70 113,875,113,508        1,276,432                0             0    1,276,432
 71 115,001,368,769        2,268,352                0             0    2,268,352
 72 115,002,147,136        3,063,328                0             0    3,063,328
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 73 116,128,402,389        1,847,296                0             0    1,847,296
 74 117,254,657,640        1,858,752                0             0    1,858,752
 75 118,380,912,895        1,452,096                0             0    1,452,096
 76 118,489,781,659        3,094,000                0             0    3,094,000
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 77 119,616,036,928          928,912                0             0      928,912
 78 120,742,292,178        2,774,896                0             0    2,774,896
 79 121,868,547,450        3,108,688                0             0    3,108,688
 80 122,082,215,584        3,124,960                0             0    3,124,960
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 81 123,208,470,846          703,120                0             0      703,120
 82 124,334,726,104        2,805,904                0             0    2,805,904
[0;31mvalgrind --tool=massif --stacks=yes --massif-out-file=./C/build/ackermann.massif.out ./C/build/ackermann[0m
==5007== Massif, a heap profiler
==5007== Copyright (C) 2003-2017, and GNU GPL'd, by Nicholas Nethercote
==5007== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==5007== Command: ./C/build/ackermann
==5007== 
==5007== 
[0;31mms_print ./C/build/ackermann.massif.out[0m
--------------------------------------------------------------------------------
Command:            ./C/build/ackermann
Massif arguments:   --stacks=yes --massif-out-file=./C/build/ackermann.massif.out
ms_print arguments: ./C/build/ackermann.massif.out
--------------------------------------------------------------------------------


    MB
1.983^                                                                      # 
     |                                                                    @ # 
     |                                                       :: @         @ # 
     |                                           @           :  @  :     :@ # 
     |                                          :@  :        :  @:::  :  :@ # 
     |                                          :@  :        :  @: :  :  :@ # 
     |                              :           :@:::        :  @: ::::  :@ # 
     |                       @@  :  ::::::      :@: :        :  @: :: :  :@ # 
     |                    @ :@   :  ::  :    :: :@: :   :    :  @: :: :  :@ # 
     |                  @@@ :@   :  ::  :    : ::@: :   :    :  @: :: :  :@ # 
     |                  @ @ :@   :  ::  :    : ::@: :   :    :  @: :: :  :@ # 
     |             @@   @ @ :@   :  ::  :    : ::@: :   :    :  @: :: :  :@ # 
     |          :  @    @ @::@   :::::  :    : ::@: : :::    :  @: :: :  :@ #:
     |          :::@    @ @::@ :::: ::  :    : ::@: : : :    :  @: :: :  :@ #:
     |     :    :: @ :  @ @::@ : :: ::  : :: : ::@: ::: :   ::  @: :: :  :@:#:
     |     :::  :: @ :  @ @::@ : :: ::  : : :: ::@: ::: :   ::  @: :: ::::@:#:
     |     ::   :: @ :  @ @::@ : :: ::  : : :: ::@: ::: ::  ::  @: :: :: :@:#:
     |     :: :::: @ :  @ @::@ : :: ::  : : :: ::@: ::: ::::::  @: :: :: :@:#:
     | ::: :: : :: @ :  @ @::@ : :: ::  : : :: ::@: ::: ::: :: :@: :: :: :@:#:
     | : :::: : :: @ :::@ @::@ : :: ::  : : :: ::@: ::: ::: :: :@: :: :: :@:#:
   0 +----------------------------------------------------------------------->Gi
     0                                                                   51.85

Number of snapshots: 54
 Detailed snapshots: [9, 13, 14, 17, 30, 41, 48, 51 (peak)]

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  0              0                0                0             0            0
  1  1,069,342,121          210,976                0             0      210,976
  2  2,437,565,372          210,168                0             0      210,168
  3  3,139,558,495          173,408                0             0      173,408
  4  4,465,431,129          677,280                0             0      677,280
  5  5,323,982,662          616,064                0             0      616,064
  6  6,350,435,144          412,728                0             0      412,728
  7  7,855,155,660          855,352                0             0      855,352
  8  8,951,428,531          765,280                0             0      765,280
  9 10,573,189,235          955,952                0             0      955,952
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 10 11,696,359,242          706,560                0             0      706,560
 11 12,915,781,510          109,880                0             0      109,880
 12 13,695,085,459          136,416                0             0      136,416
 13 14,595,770,047        1,178,416                0             0    1,178,416
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 14 15,711,179,867        1,263,536                0             0    1,263,536
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 15 16,569,720,610          925,536                0             0      925,536
 16 17,695,993,722        1,327,384                0             0    1,327,384
 17 18,540,892,687        1,395,856                0             0    1,395,856
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 18 20,080,980,332          811,384                0             0      811,384
 19 20,970,558,812        1,365,624                0             0    1,365,624
 20 22,287,319,656          919,160                0             0      919,160
 21 23,506,826,450        1,489,720                0             0    1,489,720
 22 24,708,163,575        1,403,680                0             0    1,403,680
 23 26,298,064,515          646,080                0             0      646,080
 24 26,987,953,574        1,421,400                0             0    1,421,400
 25 28,160,545,582          703,032                0             0      703,032
 26 29,733,448,210          538,360                0             0      538,360
 27 30,565,035,006        1,319,480                0             0    1,319,480
 28 31,714,798,079        1,152,192                0             0    1,152,192
 29 32,895,114,652        1,701,784                0             0    1,701,784
 30 33,912,228,549        1,772,784                0             0    1,772,784
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 31 34,776,967,728        1,523,928                0             0    1,523,928
 32 35,796,684,248        1,730,456                0             0    1,730,456
 33 36,821,154,410          639,160                0             0      639,160
 34 37,881,456,356          850,264                0             0      850,264
 35 38,976,444,784        1,349,280                0             0    1,349,280
 36 39,661,257,113          451,072                0             0      451,072
 37 40,831,734,565          389,888                0             0      389,888
 38 42,041,180,102          655,384                0             0      655,384
 39 43,288,297,944        1,879,968                0             0    1,879,968
 40 44,575,952,543          222,240                0             0      222,240
 41 45,457,470,749        1,958,384                0             0    1,958,384
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 42 46,352,501,828        1,685,848                0             0    1,685,848
 43 47,276,250,026        1,800,248                0             0    1,800,248
 44 48,692,915,696        1,465,048                0             0    1,465,048
 45 49,587,946,786        1,670,360                0             0    1,670,360
 46 50,601,151,230          594,040                0             0      594,040
 47 52,106,803,062        1,812,192                0             0    1,812,192
 48 52,763,241,529        2,058,352                0             0    2,058,352
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 49 53,658,272,614          726,552                0             0      726,552
 50 54,314,711,084          592,672                0             0      592,672
 51 54,363,933,797        2,078,960                0             0    2,078,960
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 52 55,020,372,271          518,208                0             0      518,208
 53 55,676,810,740          918,264                0             0      918,264
[0;31mvalgrind --tool=massif --stacks=yes --massif-out-file=./jabukod/build/binary_search.massif.out ./jabukod/build/binary_search[0m
==5019== Massif, a heap profiler
==5019== Copyright (C) 2003-2017, and GNU GPL'd, by Nicholas Nethercote
==5019== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==5019== Command: ./jabukod/build/binary_search
==5019== 
==5019== 
[0;31mms_print ./jabukod/build/binary_search.massif.out[0m
--------------------------------------------------------------------------------
Command:            ./jabukod/build/binary_search
Massif arguments:   --stacks=yes --massif-out-file=./jabukod/build/binary_search.massif.out
ms_print arguments: ./jabukod/build/binary_search.massif.out
--------------------------------------------------------------------------------


     B
  120^#                                                                       
     |#                                                                       
     |#     :       @         @:::::::::::::::@:::::::::::::::: :::::::::@::::
     |#:::::::::::::@:::::::::@: :::::::: :: :@:::::::::::::::: :::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@:::::::::::::::: :::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@:::::::::::::::: :::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@:::::::::::::::: :::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@:::::::::::::::: :::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@:::::::::::::::: :::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@:::::::::::::::: :::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@:::::::::::::::: :::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@:::::::::::::::: :::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@::::::::::::::::@:::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@::::::::::::::::@:::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@::::::::::::::::@:::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@::::::::::::::::@:::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@::::::::::::::::@:::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@::::::::::::::::@:::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@::::::::::::::::@:::: ::::@::::
     |#:::: ::::: ::@::::: :::@: :::::::: :: :@::::::::::::::::@:::: ::::@::::
   0 +----------------------------------------------------------------------->ki
     0                                                                   3.305

Number of snapshots: 73
 Detailed snapshots: [1 (peak), 14, 23, 38, 57, 67]

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  0              0                0                0             0            0
  1             36              120                0             0          120
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  2             90              104                0             0          104
  3            135              104                0             0          104
  4            180              104                0             0          104
  5            234              104                0             0          104
  6            308              112                0             0          112
  7            360              104                0             0          104
  8            405              104                0             0          104
  9            459              104                0             0          104
 10            513              104                0             0          104
 11            567              104                0             0          104
 12            621              104                0             0          104
 13            666              104                0             0          104
 14            695              112                0             0          112
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 15            747              104                0             0          104
 16            792              104                0             0          104
 17            837              104                0             0          104
 18            891              104                0             0          104
 19            936              104                0             0          104
 20            990              104                0             0          104
 21          1,035              104                0             0          104
 22          1,095              104                0             0          104
 23          1,145              112                0             0          112
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 24          1,199              112                0             0          112
 25          1,271              112                0             0          112
 26          1,325              112                0             0          112
 27          1,379              112                0             0          112
 28          1,415              112                0             0          112
 29          1,467              112                0             0          112
 30          1,514              112                0             0          112
 31          1,550              112                0             0          112
 32          1,595              112                0             0          112
 33          1,640              112                0             0          112
 34          1,694              112                0             0          112
 35          1,739              112                0             0          112
 36          1,784              112                0             0          112
 37          1,836              112                0             0          112
 38          1,881              112                0             0          112
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 39          1,926              112                0             0          112
 40          1,971              112                0             0          112
 41          2,018              112                0             0          112
 42          2,054              112                0             0          112
 43          2,099              112                0             0          112
 44          2,151              112                0             0          112
 45          2,196              112                0             0          112
 46          2,243              112                0             0          112
 47          2,279              112                0             0          112
 48          2,324              112                0             0          112
 49          2,376              112                0             0          112
 50          2,405              112                0             0          112
 51          2,450              112                0             0          112
 52          2,495              112                0             0          112
 53          2,540              112                0             0          112
 54          2,585              112                0             0          112
 55          2,630              112                0             0          112
 56          2,675              112                0             0          112
 57          2,706               48                0             0           48
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 58          2,756              112                0             0          112
 59          2,810              112                0             0          112
 60          2,855              112                0             0          112
 61          2,909              112                0             0          112
 62          2,963              112                0             0          112
 63          3,008              112                0             0          112
 64          3,039               48                0             0           48
 65          3,076              112                0             0          112
 66          3,105              112                0             0          112
 67          3,150              112                0             0          112
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 68          3,195              112                0             0          112
 69          3,240              112                0             0          112
 70          3,285              112                0             0          112
 71          3,330              112                0             0          112
 72          3,384              112                0             0          112
[0;31mvalgrind --tool=massif --stacks=yes --massif-out-file=./C/build/binary_search.massif.out ./C/build/binary_search[0m
==5021== Massif, a heap profiler
==5021== Copyright (C) 2003-2017, and GNU GPL'd, by Nicholas Nethercote
==5021== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==5021== Command: ./C/build/binary_search
==5021== 
==5021== 
[0;31mms_print ./C/build/binary_search.massif.out[0m
--------------------------------------------------------------------------------
Command:            ./C/build/binary_search
Massif arguments:   --stacks=yes --massif-out-file=./C/build/binary_search.massif.out
ms_print arguments: ./C/build/binary_search.massif.out
--------------------------------------------------------------------------------


    KB
7.500^                             #                                          
     |                             #:                                         
     |                             #:                                         
     |                             #:                                         
     |                             #:                                         
     |                             #:                                         
     |                             #: :                                       
     |                             #: :                                       
     |                             #: :                                       
     |                             #: :                                       
     |                             #:::                                       
     |                             #::::                                      
     |                             #::::                                      
     |                             #::::                                      
     |                             #::::                                      
     |                             #::::                                      
     |                             #::::      : :@ : : : : : :@::@:   :@  :   
     |                             #:::@:    ::::@::::::::::::@::@:::::@ ::   
     |                          :::#:::@:@@@@::::@::::::::::::@::@:::::@:::   
     |                        :::: #:::@:@   ::::@::::::::::::@::@:::::@::: ::
   0 +----------------------------------------------------------------------->ki
     0                                                                   186.6

Number of snapshots: 59
 Detailed snapshots: [8 (peak), 13, 15, 22, 37, 40, 47, 53]

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  0              0                0                0             0            0
  1          1,251              368                0             0          368
  2         62,895              312                0             0          312
  3         64,971              656                0             0          656
  4         67,896              656                0             0          656
  5         69,916              512                0             0          512
  6         71,320              960                0             0          960
  7         74,235            1,104                0             0        1,104
  8         77,329            7,680                0             0        7,680
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  9         80,046            7,648                0             0        7,648
 10         82,604            4,208                0             0        4,208
 11         85,503            5,736                0             0        5,736
 12         87,958            3,824                0             0        3,824
 13         89,456            1,360                0             0        1,360
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 14         91,537            1,336                0             0        1,336
 15         93,944            1,000                0             0        1,000
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 16        103,988            1,304                0             0        1,304
 17        105,629            1,304                0             0        1,304
 18        108,084            1,768                0             0        1,768
 19        110,539            1,528                0             0        1,528
 20        112,072            1,768                0             0        1,768
 21        114,115            1,872                0             0        1,872
 22        116,456            1,584                0             0        1,584
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 23        118,650            1,304                0             0        1,304
 24        120,993            1,768                0             0        1,768
 25        123,686            1,528                0             0        1,528
 26        125,552            1,872                0             0        1,872
 27        127,216            1,528                0             0        1,528
 28        129,597            1,528                0             0        1,528
 29        132,506            1,768                0             0        1,768
 30        133,677            1,528                0             0        1,528
 31        136,442            1,584                0             0        1,584
 32        138,432            1,528                0             0        1,528
 33        140,907            1,768                0             0        1,768
 34        143,234            1,880                0             0        1,880
 35        144,775            1,304                0             0        1,304
 36        146,598            1,768                0             0        1,768
 37        149,916            1,768                0             0        1,768
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 38        153,045            1,768                0             0        1,768
 39        154,723            1,768                0             0        1,768
 40        158,005            1,768                0             0        1,768
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 41        159,705            1,768                0             0        1,768
 42        163,066            1,304                0             0        1,304
 43        166,230            1,304                0             0        1,304
 44        167,825            1,528                0             0        1,528
 45        170,280            1,768                0             0        1,768
 46        173,439            1,624                0             0        1,624
 47        175,086            1,624                0             0        1,624
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 48        177,588            1,064                0             0        1,064
 49        180,056            1,376                0             0        1,376
 50        181,235            1,152                0             0        1,152
 51        182,587            1,768                0             0        1,768
 52        183,761              152                0             0          152
 53        185,085              312                0             0          312
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 54        186,389              312                0             0          312
 55        187,563              536                0             0          536
 56        188,734              624                0             0          624
 57        189,908              576                0             0          576
 58        191,082              512                0             0          512
[0;31mvalgrind --tool=massif --stacks=yes --massif-out-file=./jabukod/build/quick_sort.massif.out ./jabukod/build/quick_sort[0m
==5024== Massif, a heap profiler
==5024== Copyright (C) 2003-2017, and GNU GPL'd, by Nicholas Nethercote
==5024== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==5024== Command: ./jabukod/build/quick_sort
==5024== 
==5024== 
[0;31mms_print ./jabukod/build/quick_sort.massif.out[0m
--------------------------------------------------------------------------------
Command:            ./jabukod/build/quick_sort
Massif arguments:   --stacks=yes --massif-out-file=./jabukod/build/quick_sort.massif.out
ms_print arguments: ./jabukod/build/quick_sort.massif.out
--------------------------------------------------------------------------------


     B
  688^                             #                                          
     |                             #                                          
     |                             #     :           :                        
     |                             #     :           :                        
     |                             #    ::           :          :          @ :
     |                             #    ::           ::         :          @ :
     |                            :#   :::         ::: :        :         :@ :
     |                          :::#   :::        :: : :        :   :    ::@::
     |                         :: :#   :::        :: : :        :   ::   ::@::
     |                        ::: :#: ::::   :   ::: : :       ::   @: ::::@::
     |                   @@:@@::: :#::::::   ::::::: : :     @:::  :@::::::@::
     |                   @ :@ ::: :#::::::   ::::::: : :     @:::  :@::::::@::
     |               @:::@ :@ ::: :#:::::: ::::::::: : :   ::@::::::@::::::@::
     |               @: :@ :@ ::: :#:::::: ::::::::: : :   ::@::::::@::::::@::
     |          @@:::@: :@ :@ ::: :#:::::::::::::::: : ::::::@::::::@::::::@::
     |   :@@::::@@:: @: :@ :@ ::: :#:::::::::::::::: : ::::::@::::::@::::::@::
     | :::@ : ::@@:: @: :@ :@ ::: :#:::::::::::::::: : ::::::@::::::@::::::@::
     | :::@ : ::@@:: @: :@ :@ ::: :#:::::::::::::::: : ::::::@::::::@::::::@::
     | :::@ : ::@@:: @: :@ :@ ::: :#:::::::::::::::: : ::::::@::::::@::::::@::
     | :::@ : ::@@:: @: :@ :@ ::: :#:::::::::::::::: : ::::::@::::::@::::::@::
   0 +----------------------------------------------------------------------->ki
     0                                                                   33.67

Number of snapshots: 79
 Detailed snapshots: [4, 9, 10, 15, 19, 22, 27 (peak), 54, 64, 74]

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  0              0                0                0             0            0
  1            544              168                0             0          168
  2          1,169              168                0             0          168
  3          1,827              176                0             0          176
  4          2,274              176                0             0          176
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  5          2,892              176                0             0          176
  6          3,337              176                0             0          176
  7          3,964              176                0             0          176
  8          4,378              176                0             0          176
  9          4,849              240                0             0          240
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 10          5,368              232                0             0          232
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 11          5,684              232                0             0          232
 12          6,167              232                0             0          232
 13          6,614              232                0             0          232
 14          7,288              232                0             0          232
 15          7,643              296                0             0          296
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 16          8,097              288                0             0          288
 17          8,757              288                0             0          288
 18          9,146              288                0             0          288
 19          9,563              352                0             0          352
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 20         10,102              344                0             0          344
 21         10,616              344                0             0          344
 22         10,934              344                0             0          344
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 23         11,510              400                0             0          400
 24         12,152              424                0             0          424
 25         12,901              456                0             0          456
 26         13,412              512                0             0          512
 27         14,187              688                0             0          688
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 28         14,831              400                0             0          400
 29         15,211              352                0             0          352
 30         15,625              408                0             0          408
 31         15,999              512                0             0          512
 32         16,410              568                0             0          568
 33         16,991              624                0             0          624
 34         17,387              240                0             0          240
 35         17,985              288                0             0          288
 36         18,368              288                0             0          288
 37         18,935              400                0             0          400
 38         19,354              368                0             0          368
 39         19,944              344                0             0          344
 40         20,325              344                0             0          344
 41         20,910              400                0             0          400
 42         21,528              456                0             0          456
 43         21,920              512                0             0          512
 44         22,540              624                0             0          624
 45         22,938              536                0             0          536
 46         23,514              512                0             0          512
 47         23,901              144                0             0          144
 48         24,298              232                0             0          232
 49         24,728              232                0             0          232
 50         25,086              232                0             0          232
 51         25,440              232                0             0          232
 52         25,771              288                0             0          288
 53         26,100              288                0             0          288
 54         26,460              344                0             0          344
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 55         26,782              312                0             0          312
 56         27,115              368                0             0          368
 57         27,437              400                0             0          400
 58         27,788              456                0             0          456
 59         28,119              568                0             0          568
 60         28,455              288                0             0          288
 61         28,811              288                0             0          288
 62         29,134              288                0             0          288
 63         29,488              344                0             0          344
 64         29,819              400                0             0          400
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 65         30,150              456                0             0          456
 66         30,480              424                0             0          424
 67         30,803              344                0             0          344
 68         31,122              344                0             0          344
 69         31,451              400                0             0          400
 70         31,778              400                0             0          400
 71         32,104              312                0             0          312
 72         32,430              456                0             0          456
 73         32,768              512                0             0          512
 74         33,097              568                0             0          568
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 75         33,430              520                0             0          520
 76         33,779              456                0             0          456
 77         34,139              568                0             0          568
 78         34,479              480                0             0          480
[0;31mvalgrind --tool=massif --stacks=yes --massif-out-file=./C/build/quick_sort.massif.out ./C/build/quick_sort[0m
==5026== Massif, a heap profiler
==5026== Copyright (C) 2003-2017, and GNU GPL'd, by Nicholas Nethercote
==5026== Using Valgrind-3.22.0 and LibVEX; rerun with -h for copyright info
==5026== Command: ./C/build/quick_sort
==5026== 
==5026== 
[0;31mms_print ./C/build/quick_sort.massif.out[0m
--------------------------------------------------------------------------------
Command:            ./C/build/quick_sort
Massif arguments:   --stacks=yes --massif-out-file=./C/build/quick_sort.massif.out
ms_print arguments: ./C/build/quick_sort.massif.out
--------------------------------------------------------------------------------


    KB
7.500^                          #                                             
     |                          #:                                            
     |                          #:                                            
     |                          #:                                            
     |                          #:                                            
     |                          #:                                            
     |                          #: :                                          
     |                          #: :                                          
     |                          #: :                                          
     |                          #: :                                          
     |                          #:::                                          
     |                          #::::                                         
     |                          #::::                                         
     |                          #::::                                         
     |                          #::::                                         
     |                          #::::                                         
     |                          #::::      :::@: : : ::::@@:@:  ::@  :        
     |                          #:::@:    ::::@::::::::::@ :@:::: @ ::        
     |                        ::#:::@:@@@@::::@::::::::::@ :@:::: @:::        
     |                      ::::#:::@:@   ::::@::::::::::@ :@:::: @::: ::::@::
   0 +----------------------------------------------------------------------->ki
     0                                                                   203.1

Number of snapshots: 70
 Detailed snapshots: [8 (peak), 13, 15, 22, 37, 40, 47, 53, 63]

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  0              0                0                0             0            0
  1          1,251              368                0             0          368
  2         62,895              312                0             0          312
  3         64,971              656                0             0          656
  4         67,896              656                0             0          656
  5         69,916              512                0             0          512
  6         71,320              960                0             0          960
  7         74,235            1,104                0             0        1,104
  8         77,343            7,680                0             0        7,680
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
  9         80,060            7,648                0             0        7,648
 10         82,618            4,208                0             0        4,208
 11         85,517            5,736                0             0        5,736
 12         87,972            3,824                0             0        3,824
 13         89,470            1,360                0             0        1,360
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 14         91,551            1,336                0             0        1,336
 15         93,958            1,000                0             0        1,000
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 16        104,002            1,304                0             0        1,304
 17        105,643            1,304                0             0        1,304
 18        108,098            1,768                0             0        1,768
 19        110,553            1,528                0             0        1,528
 20        112,086            1,768                0             0        1,768
 21        114,129            1,872                0             0        1,872
 22        116,470            1,584                0             0        1,584
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 23        118,664            1,304                0             0        1,304
 24        121,007            1,768                0             0        1,768
 25        123,700            1,528                0             0        1,528
 26        125,566            1,872                0             0        1,872
 27        127,230            1,528                0             0        1,528
 28        129,611            1,528                0             0        1,528
 29        132,520            1,768                0             0        1,768
 30        133,691            1,528                0             0        1,528
 31        136,456            1,584                0             0        1,584
 32        138,446            1,528                0             0        1,528
 33        140,921            1,768                0             0        1,768
 34        143,248            1,880                0             0        1,880
 35        144,789            1,304                0             0        1,304
 36        146,612            1,768                0             0        1,768
 37        149,930            1,768                0             0        1,768
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 38        153,059            1,768                0             0        1,768
 39        154,737            1,768                0             0        1,768
 40        158,019            1,768                0             0        1,768
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 41        159,719            1,768                0             0        1,768
 42        163,080            1,304                0             0        1,304
 43        166,244            1,304                0             0        1,304
 44        167,839            1,528                0             0        1,528
 45        170,294            1,768                0             0        1,768
 46        173,453            1,624                0             0        1,624
 47        175,100            1,624                0             0        1,624
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 48        177,602            1,064                0             0        1,064
 49        180,070            1,376                0             0        1,376
 50        181,249            1,152                0             0        1,152
 51        182,601            1,768                0             0        1,768
 52        183,775              152                0             0          152
 53        186,996              344                0             0          344
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 54        188,446              392                0             0          392
 55        190,294              488                0             0          488
 56        191,620              584                0             0          584
 57        192,901              584                0             0          584
 58        194,480              440                0             0          440
 59        195,651              544                0             0          544
 60        196,823              680                0             0          680
 61        198,296              392                0             0          392
 62        199,505              536                0             0          536
 63        200,697              488                0             0          488
00.00% (0B) (heap allocation functions) malloc/new/new[], --alloc-fns, etc.

--------------------------------------------------------------------------------
  n        time(i)         total(B)   useful-heap(B) extra-heap(B)    stacks(B)
--------------------------------------------------------------------------------
 64        201,961              536                0             0          536
 65        203,161              680                0             0          680
 66        204,333              600                0             0          600
 67        205,578              632                0             0          632
 68        206,752              496                0             0          496
 69        207,926              512                0             0          512
