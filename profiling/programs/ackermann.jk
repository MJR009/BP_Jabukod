/*
    Martin Jab≈Ørek
    Profiling program ackermann.jk

    recursion depth
*/

int main() {
    write "\t0\t1\t2\t3\t4\t5\n";

    int m = 0;
    for (; m < 4; m=m+1) {
        writeInt(m); write "\t";

        for (int n = 0; n <= 5; n=n+1) {
            writeInt( ackermann(m, n) ); write "\t";
        }
        write "\n";
    }
    
    m = 4;
    write "4\t";
    for (int n = 0; n <= 1; n=n+1) {
        writeInt( ackermann(m, n) ); write "\t";
    }

    write "-\t-\t-\t-\t\n";
}

int ackermann(int m, int n) {
    if (m == 0) {
        return n + 1;
    } else if ((m > 0) && (n == 0)) {
        return ackermann(m - 1, 1);
    } else {
        return ackermann(m - 1, ackermann(m, n - 1));
    }
}



void writeInt(int n) {
    if (n < 0) {
        write "-";
        n = -n;
    }

    int digit = n % 10;
    n = (n - digit) / 10;
    if (n > 0) {
        writeInt(n);
    }

    string output;

    if (digit == 0) output = "0";
    if (digit == 1) output = "1";
    if (digit == 2) output = "2";
    if (digit == 3) output = "3";
    if (digit == 4) output = "4";
    if (digit == 5) output = "5";
    if (digit == 6) output = "6";
    if (digit == 7) output = "7";
    if (digit == 8) output = "8";
    if (digit == 9) output = "9";

    write output;
}
